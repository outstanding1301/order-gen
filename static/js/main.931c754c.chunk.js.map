{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","items","setItems","fileNames","setFileNames","itemCount","setItemCount","addItem","i","_items","update","idx","item","newItem","상품코드","상품명","주문수량","push","sort","a","b","localeCompare","l","length","download","its","qty","reduce","pre","next","parseInt","ws","xlsx","utils","json_to_sheet","wb","book_new","book_append_sheet","writeFile","className","onDragEnter","event","console","log","preventDefault","onDragLeave","onDragOver","onDrop","files","dataTransfer","file","includes","name","e","reader","FileReader","onload","bstr","target","result","read","type","wsname","SheetNames","Sheets","data","sheet_to_json","header","code","readAsBinaryString","window","scrollTo","onClick","style","fontSize","margin","marginTop","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.931c754c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport xlsx from 'xlsx';\nimport './App.css';\n\nfunction App() {\n\n  const [items, setItems] = useState([]);\n  const [fileNames, setFileNames] = useState([]);\n  const [itemCount, setItemCount] = useState(0);\n\n  const onDragEnter = (event) => {\n    console.log(\"파일 감지\");\n    event.preventDefault();\n  }\n\n  const onDragLeave = (event) => {\n    console.log(\"파일 이탈 감지\");\n    event.preventDefault();\n  }\n\n  const onDragOver = (event) => {\n    event.preventDefault();\n  }\n\n  const addItem = (i) => {\n    const _items = items;\n    let update = false;\n    for (const idx in _items) {\n      const item = _items[idx];\n      if(i['상품코드'] === item['상품코드']) {\n        const newItem = {\n          상품코드: item['상품코드'], \n          상품명: item['상품명'], \n          주문수량: item['주문수량'] + i['주문수량']\n        };\n        _items[idx] = newItem;\n        update = true;\n        break;\n      }\n    }\n    if(!update) {\n      _items.push(i);\n    }\n\n     setItems(_items.sort((a, b) => {\n      return (''+a.상품명).localeCompare(b.상품명)\n    }));\n\n    setItemCount(l => _items.length);\n  }\n\n\n  const onDropXlsx = (event) => {\n    console.log(\"파일 입력 감지\");\n    const supportedFilesTypes = ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];\n    const files = event.dataTransfer.files;\n    for (let i=0;i<files.length;i++) {\n      const file = files[i];\n      if(fileNames.includes(file.name)) {\n        console.log(\"파일 중복 \"+file.name);\n        continue;\n      }\n      setFileNames(e => [...e, file.name]);\n      console.log(\"파일 추가 \"+file.name);\n      // if(supportedFilesTypes.indexOf(file.type) > -1) {\n        const reader = new FileReader();\n        reader.onload = async e => {\n          const bstr = e.target.result;\n          const wb = xlsx.read(bstr, {type: 'binary'});\n          const wsname = wb.SheetNames[0];\n          const ws = wb.Sheets[wsname];\n          const data = xlsx.utils.sheet_to_json(ws, {header: 1});\n          for (let i=21;i<data.length;i+=2) {\n            if(data[i][0] != '합계'){\n              const code = data[i][1];\n              const name = data[i][2];\n              const qty = parseInt(data[i][5]);\n              const item = {상품코드: code, 상품명: name, 주문수량: qty};\n              addItem(item);\n              console.log(i);\n            }\n          }\n        }\n        reader.readAsBinaryString(file);\n      // }\n    }\n    window.scrollTo(0,0);\n    event.preventDefault();\n  }\n\n  const getText = () => {\n    if(itemCount > 0) {\n      return '파일을 추가하거나, 다운로드 버튼을 클릭하세요.';\n    }\n    else {\n      return '이 곳에 파일을 올려놓으세요.';\n    }\n  }\n\n  const download = () => {\n    const its = [...items];\n    let qty = items.reduce((pre, next) => {\n      return pre + parseInt(next.주문수량);\n    }, 0);\n    its.push({상품코드: '', 상품명: '', 주문수량: qty})\n    const ws = xlsx.utils.json_to_sheet(its);\n    const wb = xlsx.utils.book_new();\n    xlsx.utils.book_append_sheet(wb, ws, '주문서');\n    const file = xlsx.writeFile(wb, '주문서.xlsx');\n  }\n\n  const getDownloadBtn = () => {\n    if(itemCount > 0) {\n      return <button className=\"download\" onClick={download}>다운로드</button>\n    }\n    else {\n      return undefined;\n    }\n  }\n\n  const qty = items.reduce((pre, next) => {\n    return pre + parseInt(next.주문수량);\n  }, 0);;\n\n  return (\n    <div className=\"App\">\n      <div className=\"dropHere\"\n      onDragEnter={onDragEnter}\n      onDragLeave={onDragLeave}\n      onDragOver={onDragOver}\n      onDrop={onDropXlsx}>\n        {getText()}\n        {getDownloadBtn()}\n       <p style={{fontSize: '12pt', margin: 5, marginTop: 10}}>등록 파일 수 : {fileNames.length}</p>\n       <p style={{fontSize: '12pt', margin: 5}}>읽은 상품 수 : {itemCount}</p>\n       <p style={{fontSize: '12pt', margin: 5}}>총 상품 수량 : {qty}</p>\n      </div>\n      <div className=\"background\"></div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}