{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","items","setItems","addItem","i","e","sort","a","b","상품명","localeCompare","download","its","qty","reduce","pre","next","parseInt","주문수량","push","상품코드","ws","xlsx","utils","json_to_sheet","wb","book_new","book_append_sheet","writeFile","className","onDragEnter","event","console","log","preventDefault","onDragLeave","onDragOver","onDrop","files","dataTransfer","length","file","type","reader","FileReader","onload","bstr","target","result","read","wsname","SheetNames","Sheets","data","sheet_to_json","header","code","name","readAsBinaryString","window","scrollTo","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mVA6HeA,MAzHf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,KAmBPC,EAAU,SAACC,GACfF,GAAS,SAAAG,GAAC,MAAI,sBAAIA,GAAJ,CAAOD,IAAGE,MAAK,SAACC,EAAGC,GAC/B,OAAQ,GAAGD,EAAEE,oBAAKC,cAAcF,EAAEC,2BAgEhCE,EAAW,WACf,IAAMC,EAAMX,EACRY,EAAMZ,EAAMa,QAAO,SAACC,EAAKC,GAC3B,OAAOD,EAAME,SAASD,EAAKE,4BAC1B,GACHN,EAAIO,KAAK,CAACC,2BAAM,GAAIX,qBAAK,GAAIS,2BAAML,IACnC,IAAMQ,EAAKC,IAAKC,MAAMC,cAAcvB,GAC9BwB,EAAKH,IAAKC,MAAMG,WACtBJ,IAAKC,MAAMI,kBAAkBF,EAAIJ,EAAI,sBACxBC,IAAKM,UAAUH,EAAI,4BAYlC,OACE,yBAAKI,UAAU,OACb,yBAAKA,UAAU,WACfC,YAzGgB,SAACC,GACnBC,QAAQC,IAAI,6BACZF,EAAMG,kBAwGJC,YArGgB,SAACJ,GACnBC,QAAQC,IAAI,0CACZF,EAAMG,kBAoGJE,WAjGe,SAACL,GAClBC,QAAQC,IAAI,4BACZF,EAAMG,kBAgGJG,OAtFe,SAACN,GAClBC,QAAQC,IAAI,0CAGZ,IAFA,IACMK,EAAQP,EAAMQ,aAAaD,MACxBlC,EAAE,EAAEA,EAAEkC,EAAME,OAAOpC,IAAK,CAC/B4B,QAAQC,IAAI,6BACZ,IAAMQ,EAAOH,EAAMlC,GACnB4B,QAAQC,IAAR,UAAeQ,EAAKC,OAElBV,QAAQC,IAAI,0CACZ,IAAMU,EAAS,IAAIC,WACnBD,EAAOE,OAAP,uCAAgB,WAAMxC,GAAN,+BAAAE,EAAA,sDAOd,IANMuC,EAAOzC,EAAE0C,OAAOC,OAChBvB,EAAKH,IAAK2B,KAAKH,EAAM,CAACJ,KAAM,WAC5BQ,EAASzB,EAAG0B,WAAW,GACvB9B,EAAKI,EAAG2B,OAAOF,GACfG,EAAO/B,IAAKC,MAAM+B,cAAcjC,EAAI,CAACkC,OAAQ,IAE1CnD,EAAE,GAAGA,EAAEiD,EAAKb,OAAOpC,GAAG,EACZ,gBAAdiD,EAAKjD,GAAG,KACHoD,EAAOH,EAAKjD,GAAG,GACfqD,EAAOJ,EAAKjD,GAAG,GACfS,EAAMI,SAASoC,EAAKjD,GAAG,IAiB7BD,EADa,CAACiB,2BAAMoC,EAAM/C,qBAAKgD,EAAMvC,2BAAML,KA3BjC,2CAAhB,sDAgCA8B,EAAOe,mBAAmBjB,GAG9BkB,OAAOC,SAAS,EAAE,GAClB7B,EAAMG,mBAIHjC,EAAMuC,OAAS,EACT,iIAGA,+EAiBNvC,EAAMuC,OAAS,EACT,4BAAQX,UAAU,WAAWgC,QAASlD,GAAtC,iCAGP,GAcA,yBAAKkB,UAAU,iBC5GDiC,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.89bca8e0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport xlsx from 'xlsx';\nimport './App.css';\n\nfunction App() {\n\n  const [items, setItems] = useState([]);\n\n  const onDragEnter = (event) => {\n    console.log(\"파일 감지\");\n    event.preventDefault();\n  }\n\n  const onDragLeave = (event) => {\n    console.log(\"파일 이탈 감지\");\n    event.preventDefault();\n  }\n\n  const onDragOver = (event) => {\n    console.log(\"이건뭐지\");\n    event.preventDefault();\n  }\n\n  const addItem = (i) => {\n    setItems(e => [...e, i].sort((a, b) => {\n      return (''+a.상품명).localeCompare(b.상품명);\n    }));\n  }\n\n\n  const onDropXlsx = (event) => {\n    console.log(\"파일 입력 감지\");\n    const supportedFilesTypes = ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];\n    const files = event.dataTransfer.files;\n    for (let i=0;i<files.length;i++) {\n      console.log(\"파일 읽음\");\n      const file = files[i];\n      console.log(`${file.type}`);\n      // if(supportedFilesTypes.indexOf(file.type) > -1) {\n        console.log(\"파일 종류 통과\");\n        const reader = new FileReader();\n        reader.onload = async e => {\n          const bstr = e.target.result;\n          const wb = xlsx.read(bstr, {type: 'binary'});\n          const wsname = wb.SheetNames[0];\n          const ws = wb.Sheets[wsname];\n          const data = xlsx.utils.sheet_to_json(ws, {header: 1});\n          // console.log(data);\n          for (let i=21;i<data.length;i+=2) {\n            if(data[i][0] != '합계'){\n              const code = data[i][1];\n              const name = data[i][2];\n              const qty = parseInt(data[i][5]);\n              // const url = `https://supplier.coupang.com/plan/v1/ticket/sku/get/detail?skuId=${code}`;\n              // console.log(url);\n              // const res = await fetch(url\n              // , { ...{ credentials: 'include' }});\n\n              // try {\n              //   const dt = await res.json();\n              //   const item = {상품코드: code, 상품명: name, 주문수량: qty, 이미지:dt.body.image};\n              //   console.log(item);\n              //   addItem(item);\n              // }\n              // catch (err) {\n              //   const item = {상품코드: code, 상품명: name, 주문수량: qty, 이미지:undefined};\n              //   addItem(item);\n              // }\n              const item = {상품코드: code, 상품명: name, 주문수량: qty};\n              addItem(item);\n            }\n          }\n        }\n        reader.readAsBinaryString(file);\n      // }\n    }\n    window.scrollTo(0,0);\n    event.preventDefault();\n  }\n\n  const getText = () => {\n    if(items.length > 0) {\n      return '파일을 추가하거나, 다운로드 버튼을 클릭하세요.';\n    }\n    else {\n      return '이 곳에 파일을 올려놓으세요.';\n    }\n  }\n\n  const download = () => {\n    const its = items;\n    let qty = items.reduce((pre, next) => {\n      return pre + parseInt(next.주문수량);\n    }, 0);\n    its.push({상품코드: '', 상품명: '', 주문수량: qty})\n    const ws = xlsx.utils.json_to_sheet(items);\n    const wb = xlsx.utils.book_new();\n    xlsx.utils.book_append_sheet(wb, ws, '주문서');\n    const file = xlsx.writeFile(wb, '주문서.xlsx');\n  }\n\n  const getDownloadBtn = () => {\n    if(items.length > 0) {\n      return <button className=\"download\" onClick={download}>다운로드</button>\n    }\n    else {\n      return undefined;\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"dropHere\"\n      onDragEnter={onDragEnter}\n      onDragLeave={onDragLeave}\n      onDragOver={onDragOver}\n      onDrop={onDropXlsx}>\n        {getText()}\n        {getDownloadBtn()}\n      </div>\n      <div className=\"background\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}